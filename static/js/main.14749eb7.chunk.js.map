{"version":3,"sources":["components/JoinProjectDialog.js","Constants.js","components/DeleteDialog.js","components/ProjectCard.js","components/ProjectList.js","components/NewProjectFormDialog.js","App.js","index.js"],"names":["JoinFormDialog","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClickOpen","setState","dialogOpen","handleClose","onJoinDialogClosed","showContactInfo","hasDiscord","contactInfo","discordChannelUrl","react_default","a","createElement","href","state","prevProps","prevState","Dialog","open","onClose","aria-labelledby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","onClick","color","React","Component","STORAGE_URL","DeleteDialog","handleClickDelete","e","fetch","concat","projectId","method","then","response","json","jsonResponse","updateProjectList","variant","projectName","ProjectCard","onJoinClick","role","joinDialogOpen","modifiedRoles","rolesNeeded","roleIndex","indexOf","splice","headers","Content-Type","body","JSON","stringify","_this2","Card","className","CardHeader","title","subheader","projectLeadId","projectLeadRole","CardMedia","image","previewImageUrl","CardContent","Typography","projectDescription","map","Chip","avatar","Avatar","label","CardActions","DeleteDialog_DeleteDialog","JoinProjectDialog_JoinFormDialog","ProjectList","projects","Grid","container","justify","spacing","p","key","creationDate","item","ProjectCard_ProjectCard","NewProjectFormDialog","handleSubmit","preventDefault","formFields","handleSubmitDummyData","onFormChange","fieldName","event","newFieldName","newValue","target","value","split","objectSpread","defineProperty","xs","TextField","autoFocus","required","type","onChange","fullWidth","multiline","App","componentDidMount","hasError","errorMessage","error","info","console","log","NewProjectFormDialog_NewProjectFormDialog","rootElement","document","getElementById","ReactDOM","render","src_App"],"mappings":"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","file":"static/js/main.14749eb7.chunk.js","sourcesContent":["import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\n\nexport default class JoinFormDialog extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { dialogOpen: false };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (!prevProps.dialogOpen && this.props.dialogOpen && !this.state.dialogOpen) {\n      this.setState({ dialogOpen: true });\n    }\n  }\n\n  handleClickOpen = () => {\n    this.setState({ dialogOpen: true });\n  };\n\n  handleClose = () => {\n    this.setState({ dialogOpen: false });\n    this.props.onJoinDialogClosed();\n  };\n\n  showContactInfo = () => {\n    const hasDiscord = this.props.contactInfo.discordChannelUrl;\n    if (hasDiscord) {\n      return (\n        <p>\n          {\"Discord: \"}\n          <a href={hasDiscord}>{hasDiscord}</a>\n        </p>\n      );\n    }\n    return null;\n  };\n\n  render() {\n    return (\n      <Dialog\n        open={this.state.dialogOpen}\n        onClose={this.handleClose}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">Contact Info</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Awesome! Here is how you can get in touch with the project lead.\n            {this.showContactInfo()}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={this.handleClose} color=\"secondary\">\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n}\n\n","export const STORAGE_URL =\n  \"https://wt-82e23ef79ade2a8d8cfed3117b878cdb-0.sandbox.auth0-extend.com/rrowdforge2\";\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { STORAGE_URL } from \"../Constants\";\n\nexport default class DeleteDialog extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { dialogOpen: false };\n  }\n\n  handleClickOpen = () => {\n    this.setState({ dialogOpen: true });\n  };\n\n  handleClose = () => {\n    this.setState({ dialogOpen: false });\n  };\n\n  handleClickDelete = (e) => {\n    fetch(`${STORAGE_URL}?projectId=${this.props.projectId}`, {\n      method: \"DELETE\",\n    })\n      .then(response => response.json())\n      .then(jsonResponse => {\n        this.props.updateProjectList(jsonResponse);\n      });\n    this.setState({ dialogOpen: false });\n  }\n\n  render() {\n    return (\n      <div>\n        <Button\n          variant=\"outlined\"\n          color=\"secondary\"\n          onClick={this.handleClickOpen}\n        >\n          Delete\n        </Button>\n        <Dialog\n          open={this.state.dialogOpen}\n          onClose={this.handleClose}\n        >\n          <DialogTitle>Delete Project</DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              {`Are you sure you want to delete ${this.props.projectName}?`}\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose} color=\"primary\">\n              Cancel\n            </Button>\n            <Button onClick={this.handleClickDelete} color=\"secondary\">\n              Delete\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </div>\n    );\n  }\n}\n\n","import React, { Component } from \"react\";\nimport \"./ProjectCard.css\";\nimport PropTypes from \"prop-types\";\nimport Avatar from '@material-ui/core/Avatar';\nimport Chip from '@material-ui/core/Chip';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Typography from '@material-ui/core/Typography';\nimport JoinProjectDialog from \"./JoinProjectDialog\";\nimport DeleteDialog from \"./DeleteDialog\";\nimport { STORAGE_URL } from \"../Constants\";\n\nexport default class ProjectCard extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { joinDialogOpen: false };\n  }\n\n  onJoinClick = (role) => {\n    this.setState({ joinDialogOpen: true });\n\n    const modifiedRoles = this.props.rolesNeeded;\n    const roleIndex = modifiedRoles.indexOf(role);\n    if (roleIndex !== -1) {\n      modifiedRoles.splice(roleIndex, 1);\n    }\n\n    fetch(STORAGE_URL, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json; charset=utf-8\"\n      },\n      body: JSON.stringify({\n        projectId: this.props.projectId,\n        rolesNeeded: modifiedRoles,\n      })\n    })\n      .then(response => response.json())\n      .then(jsonResponse => {\n        this.props.updateProjectList(jsonResponse);\n      });\n  }\n\n  onJoinDialogClosed = () => {\n    this.setState({ joinDialogOpen: false });\n  }\n\n  render() {\n    return (\n      <Card className=\"ProjectCard\">\n        <CardHeader\n          className=\"ProjectCardHeader\"\n          title={this.props.projectName}\n          subheader={`${this.props.projectLeadId} | ${this.props.projectLeadRole}`}\n        />\n        <CardMedia\n          className=\"ProjectCardImage\"\n          image={this.props.previewImageUrl ? this.props.previewImageUrl : \"/default_preview_image.png\"}\n        />\n        <CardContent className=\"ProjectCardContent\">\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            {this.props.projectDescription}\n          </Typography>\n          <Typography variant=\"body1\">\n            Roles Available\n          </Typography>\n          {this.props.rolesNeeded.map(role =>\n            <Chip\n              className=\"ProjectCardRoleChip\"\n              avatar={<Avatar>Join</Avatar>}\n              label={role}\n              color=\"primary\"\n              variant=\"outlined\"\n              onClick={() => this.onJoinClick(role)}\n            />)}\n        </CardContent>\n        <CardActions>\n          <DeleteDialog\n            projectId={this.props.projectId}\n            projectName={this.props.projectName}\n            updateProjectList={this.props.updateProjectList}>\n          </DeleteDialog>\n        </CardActions>\n        <JoinProjectDialog\n          contactInfo={this.props.contactInfo}\n          dialogOpen={this.state.joinDialogOpen}\n          onJoinDialogClosed={this.onJoinDialogClosed} />\n      </Card>\n    );\n  }\n}\n\nProjectCard.propTypes = {\n  projectId: PropTypes.string.isRequired,\n  projectLeadId: PropTypes.string.isRequired,\n  projectLeadRole: PropTypes.string.isRequired,\n  projectName: PropTypes.string.isRequired,\n  projectDescription: PropTypes.string.isRequired,\n  previewImageUrl: PropTypes.string,\n  rolesNeeded: PropTypes.array.isRequired,\n  contactInfo: PropTypes.object.isRequired\n};\n","import React from \"react\";\nimport ProjectCard from \"./ProjectCard\";\nimport Grid from \"@material-ui/core/Grid\";\n\nexport default function (props) {\n  if (!props.projects) return null;\n  return (\n    <div>\n      <Grid container justify=\"center\" spacing={2}>\n        {props.projects.map(p => {\n          return (\n            <Grid key={p.projectName + p.creationDate} item>\n              <ProjectCard\n                projectId={p.projectId}\n                projectLeadId={p.projectLeadId}\n                projectLeadRole={p.projectLeadRole}\n                projectName={p.projectName}\n                projectDescription={p.projectDescription}\n                previewImageUrl={p.previewImageUrl}\n                rolesNeeded={p.rolesNeeded}\n                contactInfo={p.contactInfo}\n                updateProjectList={props.updateProjectList}\n              />\n            </Grid>\n          );\n        })}\n      </Grid>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { STORAGE_URL } from \"../Constants\";\n\nexport default class NewProjectFormDialog extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { dialogOpen: false, formFields: {} };\n  }\n\n  handleClickOpen = () => {\n    this.setState({ dialogOpen: true });\n  };\n\n  handleClose = () => {\n    this.setState({ dialogOpen: false });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.setState({ dialogOpen: false });\n    fetch(STORAGE_URL, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json; charset=utf-8\"\n      },\n      body: JSON.stringify(this.state.formFields)\n    })\n      .then(response => response.json())\n      .then(jsonResponse => {\n        this.props.updateProjectList(jsonResponse);\n      });\n  };\n\n  // TODO delete this after testing\n  handleSubmitDummyData = () => {\n    this.setState({ dialogOpen: false });\n    fetch(STORAGE_URL, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json; charset=utf-8\"\n      },\n      body: JSON.stringify({\n        projectLeadId: \"pop123\",\n        projectLeadRole: \"composer\",\n        projectName: \"Final Fantasy Background Music\",\n        projectDescription: \"Making some sweet tunes for a fan-made FF game.\",\n        rolesNeeded: [\"guitarist\", \"drummer\", \"pianist\"],\n        contactInfo: {\n          discordChannelUrl: \"https://discord.gg/music\"\n        }\n      })\n    })\n      .then(response => response.json())\n      .then(jsonResponse => {\n        this.props.updateProjectList(jsonResponse);\n      });\n  };\n\n  onFormChange = (fieldName, event) => {\n    let newFieldName = fieldName;\n    let newValue = event.target.value;\n    if (fieldName === \"rolesNeeded\") {\n      newValue = newValue.split(\",\");\n    } else if (fieldName === \"discordChannelUrl\") {\n      newFieldName = \"contactInfo\";\n      newValue = { discordChannelUrl: newValue };\n    }\n\n    this.setState({\n      formFields: { ...this.state.formFields, [newFieldName]: newValue }\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <Button\n          variant=\"outlined\"\n          color=\"primary\"\n          onClick={this.handleClickOpen}\n        >\n          Post new Project\n        </Button>\n        <Dialog\n          open={this.state.dialogOpen}\n          onClose={this.handleClose}\n          aria-labelledby=\"form-dialog-title\"\n        >\n          <DialogTitle id=\"form-dialog-title\">New Project Details</DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              Awesome! You have an idea and want some help. Fill out this form\n              to get started.\n            </DialogContentText>\n            <Grid container spacing={3}>\n              <Grid item xs={6}>\n                <TextField\n                  autoFocus\n                  required\n                  id=\"projectLeadId\"\n                  label=\"Email Address\"\n                  type=\"email\"\n                  onChange={e => this.onFormChange(\"projectLeadId\", e)}\n                />\n              </Grid>\n              <Grid item xs={6}>\n                <TextField\n                  required\n                  id=\"projectLeadRole\"\n                  label=\"Your Role\"\n                  onChange={e => this.onFormChange(\"projectLeadRole\", e)}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  required\n                  id=\"projectName\"\n                  label=\"Project Name\"\n                  onChange={e => this.onFormChange(\"projectName\", e)}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  multiline\n                  required\n                  id=\"projectDescription\"\n                  label=\"Description\"\n                  onChange={e => this.onFormChange(\"projectDescription\", e)}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  required\n                  id=\"rolesNeeded\"\n                  label=\"List the roles you need for this project, separated by commas\"\n                  onChange={e => this.onFormChange(\"rolesNeeded\", e)}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  required\n                  id=\"discordChannelUrl\"\n                  label=\"URL to your Discord Channel\"\n                  onChange={e => this.onFormChange(\"discordChannelUrl\", e)}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  required\n                  id=\"previewImageUrl\"\n                  label=\"Link to your Preview Image\"\n                  onChange={e => this.onFormChange(\"previewImageUrl\", e)}\n                />\n              </Grid>\n            </Grid>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleSubmitDummyData} color=\"default\">\n              Dummy Data\n            </Button>\n            <Button onClick={this.handleClose} color=\"secondary\">\n              Cancel\n            </Button>\n            <Button onClick={this.handleSubmit} color=\"primary\">\n              Submit\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport ProjectList from \"./components/ProjectList\";\nimport NewProjectFormDialogButton from \"./components/NewProjectFormDialog\";\nimport { STORAGE_URL } from \"./Constants\";\nimport \"./styles.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false, errorMessage: \"\", projects: [] };\n  }\n\n  componentDidMount = () => {\n    fetch(STORAGE_URL)\n      .then(response => response.json())\n      .then(jsonResponse =>\n        this.setState({\n          projects: jsonResponse\n        })\n      );\n  };\n\n  updateProjectList = projects => {\n    this.setState({\n      projects\n    });\n  };\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, info) {\n    // You can also log the error to an error reporting service\n    console.log(error, info);\n    this.setState({ errorMessage: JSON.stringify(error + info) });\n  }\n\n  handleClickOpen = () => { };\n\n  render() {\n    if (this.state.hasError) {\n      return <div>Error {this.state.errorMessage}</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Project Listings Board</h1>\n        <NewProjectFormDialogButton\n          updateProjectList={this.updateProjectList}\n        />\n        <h2>Projects in need of help</h2>\n        <ProjectList projects={this.state.projects} updateProjectList={this.updateProjectList} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles.css\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}